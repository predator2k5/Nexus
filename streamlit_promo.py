__import__('pysqlite3')
import sys
sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')

from crewai import Agent
from crewai import LLM
import litellm
import openai
import os
from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from dotenv import load_dotenv
from crewai_tools import FileReadTool, FileWriterTool
import streamlit as st

load_dotenv()

# Title
st.set_page_config(page_title="Promotion Letter Generator", layout="wide")

# Title and description
st.title("Promotion Letter Generator")

# Sidebar
with st.sidebar:
    st.header("Content Settings")
    company_name=st.text_input("Company Name")
    employee_name=st.text_input("Employee Name")
    current_role=st.text_input("Curent Role")
    new_role=st.text_input("Promoted Role")
    new_salary=st.text_input("Upgraded Salary")
    effect_date=st.text_input("Date Of Effect")
    reason=st.text_input("Reason For Promotion")
    st.markdown("-----")

    generate_button = st.button("Generate Content", type="primary", use_container_width=True)

def generate_content(company_name,employee_name,current_role,new_role,new_salary,effect_date,reason):

        # Create a senior blog content researcher
        hr_manager = Agent(
            role='HR Promotion Specialist',
            goal='Generate promotion letters with a formal structure adhering to industry norms',
            description='Specialized in writing promotion letters that are professional, well-structured, and maintain industry standards',
            verbose=True,
            memory=True,
            backstory=(
            "You are an expert in creating promotion letters that are formal, well-structured, and adhere to industry standards. "
            "Generate a promotion letter using the provided details: {company_name}, {employee_name}, {current_role}, {new_role}, {new_salary}, {effect_date}, and {reason}. "
            "Ensure the promotion letter is clear, concise, and professionally written. "
            "It should be very detailed and maintain a formal tone. "
            "The report should be very detailed and lengthy enough to meet industry standards."
            ),
            allow_delegation=True,
        )

        # Create a reporting analyst agent
        hr_writer = Agent(
            role='Senior HR Writer',
            goal='Write the promotion letter based on the content generated by the HR Promotion Specialist',
            description='Generate well-structured and professional promotion letters',
            verbose=True,
            memory=True,
            backstory=(
            "You are an expert in writing promotion letters that are clear, concise, and professionally written. "
            "Ensure the promotion letter includes all necessary details such as company name, employee name, current role, new role, new salary, date of effect, and reason for promotion. "
            "The content should adhere to industry standards and be formatted professionally. "
            "It should be very detailed and maintain a formal tone. "
            "The report should be very detailed and lengthy enough to meet industry standards."
            ),
            allow_delegation=True,
            tools=[FileWriterTool()]
        )

        promotion_task = Task(
            description=(
            "Generate a detailed and professional promotion letter. "
            "Ensure that all provided details such as {company_name}, {employee_name}, {current_role}, {new_role}, {new_salary}, {effect_date}, and {reason} are included. "
            "The promotion letter should be formal, well-structured, and adhere to industry standards. "
            "It should be clear, concise, and professionally written, maintaining a consistent output every time. "
            "The report should be very detailed and lengthy enough to meet industry standards."
            "In place of date give a date that is 15 days before the {effect_date}"
            "In place of name use the {employee_name}"
            "Do not write any made up infomration write only about the information given to you as input"
            "Generate the report in copyable format always"
            ),
            expected_output='A professionally written promotion letter with all the provided details accurately included and well structured.',
            agent=hr_manager,
        )

        reporting_task = Task(
            description=(
            "Write a detailed and professional promotion letter based on the provided details. "
            "Ensure the letter is well-structured, error-free, and adheres to industry standards. "
            "Include all necessary information such as {company_name}, {employee_name}, {current_role}, {new_role}, {new_salary}, {effect_date}, and {reason}. "
            "The report should be very detailed and lengthy enough to meet industry standards."
            "In place of date give a date that is 15 days before the {effect_date}"
             "In place of name use the {employee_name}"
             "Do not write any made up infomration write only about the information given to you as input"
             "Generate the report in copyable format always"
            ),
            expected_output='A professionally written promotion letter with all the provided details accurately included and well structured.',
            agent=hr_writer,
        )

        # Crew
        crew = Crew(
            agents=[hr_manager, hr_writer],
            tasks=[promotion_task, reporting_task],
            process=Process.sequential,
            verbose=True,
        )

        # Convert joining_date to string
        # joining_date_str = joining_date.strftime('%Y-%m-%d')

        return crew.kickoff(inputs={
            "company_name": company_name,
            "employee_name": employee_name,
            "current_role": current_role,
            "new_role": new_role,
            "new_salary": new_salary,
            "effect_date": effect_date,
            "reason": reason
        })

# def generate_pdf(content):
#     pdf = FPDF()
#     pdf.add_page()
#     pdf.set_font("Arial", size=12)
#     for line in content.split('\n'):
#         pdf.cell(200, 10, txt=line, ln=True)
#     return pdf.output(dest='S').encode('latin1')

# Main content area
if generate_button:
    with st.spinner("Generating Content...This may take a moment.."):
        try:
            result = generate_content(company_name, employee_name, current_role, new_role, new_salary, effect_date, reason)
            if result:
                st.markdown("### Generated Content")
                st.markdown(result)

                # Add download button for text
                st.download_button(
                    label="Download Content",
                    data=result.raw,
                    file_name=f"offer_letter.txt",
                    mime="text/plain"
                )
                # Generate PDF and add download button for PDF
                # pdf_data = generate_pdf(result.raw)
                # st.download_button(
                #     label="Download PDF",
                #     data=pdf_data,
                #     file_name=f"offer_letter.pdf",
                #     mime="application/pdf"
                # )
        except Exception as e:
            st.error(f"An error occurred: {str(e)}")

# Footer
st.markdown("----")
st.markdown("Built by AritraM")
